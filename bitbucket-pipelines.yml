options:
  docker: true

pipelines:
  default:
    - step:
        name: Unit tests
        image: golang:1.11
        script:
          - echo TODO
  branches:
    master:
      - step:
          name: Unit tests
          image: golang:1.11
          script:
            - echo TODO
      - step:
          name: Build Docker
          image: google/cloud-sdk:latest
          caches:
            - docker
          script:
            - export IMAGE_NAME=eu.gcr.io/$GCLOUD_PROJECT/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT
            - echo $GCLOUD_API_KEYFILE | base64 -d > ~/.gcloud-api-key.json
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - gcloud config set project $GCLOUD_PROJECT
            - gcloud auth configure-docker --quiet
            # BUILD IMAGE
            - docker build . -t $IMAGE_NAME
            # PUBLISH IMAGE
            - docker push $IMAGE_NAME
      - step:
          name: Build Debian package
          caches:
            - docker
          script:
            - export IMAGE_NAME=$BITBUCKET_REPO_SLUG-$BITBUCKET_BRANCH-debian-build
            - docker build -f Dockerfile.debian -t $IMAGE_NAME .
            - docker run -v $PWD/target:/target -e BUILD_NUMBER=${BITBUCKET_BUILD_NUMBER} $IMAGE_NAME
      - step:
          name: Deploy to staging
          deployment: staging
          trigger: manual
          script:
            - export PACKAGE_FILE=`ls -1 target/*.deb`
            - echo "Publish package $PACKAGE_FILE on Gemfury"
            - curl -F package=@$PACKAGE_FILE https://$GEMFURY_TOKEN@push.fury.io/enroute/
      - step:
          name: Deploy to production
          image: google/cloud-sdk:latest
          caches:
            - docker
          deployment: production
          trigger: manual
          script:
            # Tag image in registry with production label
            - export IMAGE_NAME=eu.gcr.io/$GCLOUD_PROJECT/$BITBUCKET_REPO_SLUG:$BITBUCKET_COMMIT
            - export TAGGED_IMAGE_NAME=eu.gcr.io/$GCLOUD_PROJECT/$BITBUCKET_REPO_SLUG:production
            - echo $GCLOUD_API_KEYFILE | base64 -d > ~/.gcloud-api-key.json
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - gcloud config set project $GCLOUD_PROJECT
            - gcloud auth configure-docker --quiet
            - docker pull $IMAGE_NAME
            - docker tag $IMAGE_NAME $TAGGED_IMAGE_NAME
            - docker push $TAGGED_IMAGE_NAME
            - ssh $SSH_TARGET bitbucket-deploy $BITBUCKET_REPO_SLUG
